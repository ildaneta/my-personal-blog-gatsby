{"expireTime":9007200889330543000,"key":"transformer-remark-markdown-html-711bcff8af687f3d33e0235c0bcb82b1-gatsby-remark-relative-imagesgatsby-remark-imagesgatsby-remark-lazy-loadgatsby-remark-prismjs-","val":"<p><img src=\"assets/img/0_bpYAhsqPDn2CO78u.png\" alt=\"javascript spread e rest operator\"></p>\n<p>Atrav√©s do bootcamp do qual sou aluna, aprendi sobre os operadores REST e SPREAD, ambas features do ES6.</p>\n<p>Por√©m apareceu uma publica√ß√£o em minha timeline do linkedin onde o autor falou um pouco do REST, e ao visualizar os coment√°rios percebi que v√°rios desenvolvedores pareciam ainda n√£o conhecer essa maravilhosidade, e ent√£o resolvi escrever esse artigo para ajudarmos ainda mais desenvolvedor@s.</p>\n<h1>SPREAD</h1>\n<p>Basicamente o operador spread <code class=\"language-text\">...</code> serve para que possamos copiar dados de um array ou objeto e para passarmos um array inteiro como par√¢metro para uma fun√ß√£o, por√©m quando a fun√ß√£o n√£o espera um array mas sim argumentos separados.</p>\n<blockquote>\n<p>OMG parece genial n√£o? Mas como utiliz√°-lo?</p>\n</blockquote>\n<p><img src=\"assets/img/1_EQ_i83oYjj81VyZDlt9G1A.png\" alt=\"exemplo 01\"></p>\n<p>Partindo do c√≥digo acima, podemos observar que temos a vari√°vel <strong>dataUser</strong> que √© um array com os dados de um usu√°rio.</p>\n<p>Suponhamos que queremos criar uma novo array <strong>newUser</strong> que possua os mesmos dados do <strong>dataUser</strong>, mais dados adicionais, ent√£o utilizamos o spread [<strong><em>‚Ä¶nameArray</em></strong>, dadosAdicionais].</p>\n<p>Ent√£o, dando um <code class=\"language-text\">console.log</code> em nossos 2 arrays, vemos que <strong>dataUser</strong> possui 4 posi√ß√µes e <strong>newUser</strong> possui 6, pois ele possui tudo de dataUser mais o estado civil e a cidade como dados adicionais.</p>\n<p>Podemos tamb√©m apenas copiar os dados do array ou objeto que queremos e coloc√°-los em uma nova vari√°vel, nada nos impede:</p>\n<p><img src=\"assets/img/1_m7MTzUcZgBM7ahbXhZVMnQ.png\" alt=\"exemplo 02\"></p>\n<p>Com isso, os objetos <strong>dataUser</strong> e <strong>newUser</strong> possuir√£o os mesmos conte√∫dos.</p>\n<p>Outra forma de utilizarmos o spread √© em fun√ß√µes, principalmente aquelas que requerem uma quantidade consider√°vel de par√¢metros.<br>\nUtilizando o exemplo abaixo, nossa fun√ß√£o <strong>sum</strong> espera por tr√™s par√¢metros, onde ela retornar√° a soma dos 3.</p>\n<p>Se n√£o t√≠vessemos o spread, ter√≠amos as duas op√ß√µes abaixo para enviar par√¢metros a nossa fun√ß√£o, sendo a op√ß√£o 2 a ‚Äòpior‚Äô forma digamos.</p>\n<p><img src=\"assets/img/1_g5hU573WYJl5gCLaqf7epQ.png\" alt=\"exemplo 03\"></p>\n<p>Com o spread precisar√≠amos apenas:</p>\n<p><img src=\"assets/img/1_pdEGJ8AtvxFhzYVJcBXGsQ.png\" alt=\"exemplo 04\"></p>\n<p>O que o spread faz no exemplo acima √© ‚Äúquebrar o array‚Äù onde cada posi√ß√£o se torna uma vari√°vel do argumento.</p>\n<p>Podemos tamb√©m combinar (um ou mais) arrays ou (um ou mais) objetos:</p>\n<p><img src=\"assets/img/1_QbBux4m49yEFZwPkn2gJMg.png\" alt=\"exemplo 05\"></p>\n<p>Perceba que no exemplo acima, utilizei o spread tamb√©m no <code class=\"language-text\">console.log</code>, assim ele j√° mostra meu array <strong>fullName</strong> ‚Äò<em>espalhado</em>‚Äô.</p>\n<h1>REST</h1>\n<p>O rest √© utilizado quando queremos recuperar o resto de conte√∫dos de objetos e vetores, permitindo que n√≥s transformemos indeterminado n√∫mero de par√¢metros em um novo array.</p>\n<p>Seguindo a linha do spread, o rest possui a mesma forma declarativa para utiliza√ß√£o, ‚Ä¶nomeArray ou ‚Ä¶nomeObjeto, por√©m o rest √© utilizado sempre no final e a forma de nomear as vari√°veis tamb√©m √© diferente, pois o rest utiliza o modelo de desestrutura√ß√£o.</p>\n<p>Vamos aos exemplos:</p>\n<p><img src=\"assets/img/1_yOOJMxG6QxD3Rkd_tUm3lQ.png\" alt=\"exemplo 06\"></p>\n<p>Conforme acima, o array <strong>numbers</strong> possui n√∫meros, por√©m se quisermos utilizar alguns n√∫meros em vari√°veis separadas, basta criarmos um novo array passando o nome que essas vari√°veis passar√£o a ter e o restante dos dados que n√£o quisermos em vari√°veis separadas, podemos transform√°-los em outro array.<br>\nNesse caso, o <strong>restNumbers</strong> √© um array derivado de <strong>numbers</strong> que possui o restante dos n√∫meros que n√£o separamos.</p>\n<p><img src=\"assets/img/1_t3X5RFnj7hVnYhJg78lQtA.png\" alt=\"exemplo 07\"></p>\n<p>Os nomes que daremos as nossas vari√°veis devem seguir a ordem da posi√ß√£o dos itens do array, nesse caso, name equivale a posi√ß√£o[0] de <strong>person</strong>, assim como yearBirth equivale a posi√ß√£o[1] e assim sucessivamente.</p>\n<p>O rest tamb√©m funciona com objetos, por√©m j√° √© um processo de desestrutura√ß√£o diferente e acho que merece um artigo s√≥ para ele.</p>\n<p>Espero que tenham conseguido entender o valor desses operadores em nosso dia-a-dia, pois s√£o uma m√£o na roda.</p>\n<p>E se voc√™ utiliza React por exemplo, o spread √© muito valioso para setar valores em estados, j√° que o React parte do princ√≠pio da imutabilidade, ent√£o possivelmente (se voc√™ n√£o estiver utilizando um MobX ou Redux por ex) ser√° necess√°rio copiar o valor o estado ‚Ä¶stateAtual e adicionar o novo valor em seguida.</p>\n<p>Um abra√ßo e te espero no pr√≥ximo artigo üòò‚Ä¶</p>"}