{
    "componentChunkName": "component---src-components-templates-blog-post-js",
    "path": "/posts/entendo-a-importância-dos-commits-semânticos/",
    "result": {"data":{"markdownRemark":{"fields":{"slug":"posts/entendo-a-importância-dos-commits-semânticos/"},"frontmatter":{"title":"Entendendo a importância dos Commits Semânticos","description":"Neste artigo iremos descobrir o quanto os commits semânticos são essenciais em nossa carreira e como essa prática pode torná-lo(a) um programador(a) melhor!","date":"28 de julho de 2020","thumbnail":"assets/img/gitcommit.PNG"},"html":"<p><img src=\"assets/img/gitcommit.PNG\" alt=\"commits semanticos\"></p>\n<p>No banco que trabalho atualmente, estamos desenvolvendo um documento com boas práticas que serão seguidas por todos(as) os(as) devs do banco, e um dos itens desse documento são os <strong><em>Commits Semânticos</em></strong>, que é uma simples prática que deveríamos utilizar não apenas em corporações, mas também em projetos pessoais.</p>\n<p>Acredito que ainda possuem muitos (as) programadores (as) que desconhecem essa boa prática, e minha intenção com esse artigo é justamente aumentar seu conhecimento, e que com isso, você consiga ver todo o potencial por detrás da utilização desses commits, por exemplo: mostrar a uma empresa que você deseja se candidatar, que seus projetos possuem bons commits, antes mesmo de ter atuando em equipes laborais.</p>\n<h1>O que são Commits Semânticos?</h1>\n<p>De acordo com a documentação do <a href=\"https://www.conventionalcommits.org/pt-br/v1.0.0-beta.4/\">Convetional Commits</a>, Commits Semânticos são uma convenção simples para ser utilizada nas mensagens de commit. Essa convenção define um conjunto de regras para criar um histórico de commit explícito, o que facilita a criação de ferramentas automatizadas.</p>\n<h3>Porque realizar esse tipo de commit?</h3>\n<p>Além do que é citado na documentação, esses commits auxiliarão você e sua equipe a entenderem de forma facilitada quais alterações foram realizadas no trecho de código que foi commitado.</p>\n<p>Essa identificação ocorre por meio de uma palavra que identifica se aquele commit realizado se trata de uma alteração de código, atualização de pacotes, documentação, alteração de visual, teste...</p>\n<p>Para se ter ideia do quanto são importantes, a biblioteca de testes <strong>Karma</strong> utiliza como critério de mensagem para geração de log de alterações, o padrão de commit semântico. Para visualizar a documentação do Karma basta <a href=\"https://karma-runner.github.io/3.0/dev/git-commit-msg.html\">clicar aqui.</a></p>\n<h3>Como realizar um Commit Semântico?</h3>\n<p>A estrutura base de um commit semântico ou \"esqueleto\" é:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tipo</span>\n  <span class=\"token punctuation\">></span></span>(escopo opcional):\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>descrição</span><span class=\"token punctuation\">></span></span> [corpo opcional] [rodapé opcional]<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>descrição</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tipo</span>\n<span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Tipo e Descrição</h2>\n<p>O commit semântico possui os elementos estruturais abaixo (<strong>tipos</strong>), que informam a intenção do seu commit ao utilizador(a) de seu código.</p>\n<ol>\n<li><strong>fix</strong> - Commits do tipo <strong><code class=\"language-text\">fix</code></strong> indicam que seu trecho de código commitado está solucionando um problema (bug fix), (se relaciona com o <strong><code class=\"language-text\">PATCH</code></strong> do versionamento semântico).</li>\n<li><strong>feat</strong> - Commits do tipo <strong><code class=\"language-text\">feat</code></strong> indicam que seu trecho de código está incuindo um novo recurso (se relaciona com o <strong><code class=\"language-text\">MINOR</code></strong> do versionamento semântico).</li>\n<li><strong>docs</strong> - Commits do tipo <strong><code class=\"language-text\">docs</code></strong> indicam que houveram mudanças na documentação, como por exemplo no Readme do seu repositório. <em>(Não inclui alterações em código).</em></li>\n<li><strong>style</strong> - Commits do tipo <strong><code class=\"language-text\">style</code></strong> indicam que houveram alterações referentes a formatações de código, semicolons, trailing spaces, lint... <em>(Não inclui alterações em código).</em></li>\n<li><strong>refactor</strong> - Commits do tipo <strong><code class=\"language-text\">refactor</code></strong> referem-se a mudanças devido a refatorações que não alterem sua funcionalidade, como por exemplo, uma alteração no formato como é processada determinada parte da tela, mas que manteve a mesma funcionalidade, ou melhorias de performance devido a um code review.</li>\n<li><strong>build</strong> - Commits do tipo <strong><code class=\"language-text\">build</code></strong> são utilizados quando são realizadas modificações em arquivos de build e dependências.</li>\n<li><strong>test</strong> - Commits do tipo <strong><code class=\"language-text\">test</code></strong> são utilizados quando são realizadas alterações em testes, seja criando, alterando ou excluindo testes unitários. <em>(Não inclui alterações em código)</em></li>\n<li><strong>chore</strong> - Commits do tipo <strong><code class=\"language-text\">chore</code></strong> indicam atualizações de tarefas de build, configurações de administrador, pacotes... como por exemplo adicionar um pacote no gitignore. <em>(Não inclui alterações em código)</em></li>\n<li><strong>BREAKING CHANGE</strong> - Commits que possuem o texto <strong><code class=\"language-text\">BREAKING CHANGE</code></strong> no começo do corpo opcional ou no rodapé opcional, indicam que a modificação que está sendo realizada no commit, possui uma modificiação que quebra a compatibilidade da API, (se relaciona com o <strong><code class=\"language-text\">MAJOR</code></strong> do versionamento semântico).</li>\n</ol>\n<p>Observação: Quando se utiliza o <strong><code class=\"language-text\">BREAKING CHANGE</code></strong> é <strong>obrigatório</strong> informar uma descrição, onde deverá conter o que foi alterado na API por exemplo.<br>\nAlém disso, é indicado que o <strong>tipo</strong> seja acompanhado de um <code class=\"language-text\">!</code> para chamar atenção para a quebra de compatibilidade.</p>\n<ol>\n<li>Commit Semântico que inclui o BREAKING CHANGE, além do <code class=\"language-text\">!</code> para chamar atenção para a quebra de compatibilidade.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">chore<span class=\"token operator\">!</span><span class=\"token operator\">:</span> removendo Node <span class=\"token number\">6</span> da matriz de testes\n\n<span class=\"token constant\">BREAKING</span> <span class=\"token constant\">CHANGE</span><span class=\"token operator\">:</span> removendo Node <span class=\"token number\">6</span> que atinge o final de vida em Abril</code></pre></div>\n<ol start=\"2\">\n<li>Commit Semântico apenas com tipo e descrição</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">docs<span class=\"token operator\">:</span> ortografia correta de <span class=\"token constant\">CHANGELOG</span></code></pre></div>\n<h2>Corpo</h2>\n<p>O <strong>corpo</strong>, como mencionado no \"esqueleto do commit semântico\" é opcional. É indicado utilizá-lo quando o detalhamento do seu commit irá ser maior que 7 palavras.</p>\n<ol start=\"3\">\n<li>Commit Semântico com corpo</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">feat<span class=\"token operator\">:</span> adicionado a nova estrutura de pastas <span class=\"token keyword\">do</span> frontend\n\n<span class=\"token operator\">-</span> Foi realizada uma mudança em toda a estruturação de páginas <span class=\"token keyword\">do</span> projeto frontend<span class=\"token punctuation\">,</span>\npois agora iremos utilizar o modelo de Design Atômico</code></pre></div>\n<h2>Escopo</h2>\n<p>O escopo do commit, é opcional, e é com ele que iremos informar qual parte do código foi modificado. Pode ser o nome de um componente, uma determinada propriedade da API ou o nome da API, uma função...</p>\n<ol start=\"4\">\n<li>Commit Semântico com escopo e corpo</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">fix</span><span class=\"token punctuation\">(</span>ProdutoApi<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> retirando variável <span class=\"token keyword\">do</span> path da <span class=\"token constant\">API</span> e ajustando loggers\n\n<span class=\"token operator\">-</span> <span class=\"token constant\">O</span> path anterior tinha variáveis desnecessárias e não utilizadas por nenhum\nconsumidor</code></pre></div>\n<h2>Rodapé</h2>\n<p>O rodapé, assim como o escopo e descrição, são opcionais de serem informados. Nele geralmente são informados uma issue, id ou tasks de atividades, que foram utilizadas para realizar a alteração desse trecho de código commitado.</p>\n<ol start=\"5\">\n<li>Commit Semântico com escopo, corpo e rodapé</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">fix<span class=\"token operator\">:</span> corrige pequenos erros de digitação no código\n\nveja o ticket para detalhes sobre os erros de digitação corrigidos\n\noriginado da issue <span class=\"token constant\">JD</span>#<span class=\"token number\">12</span></code></pre></div>\n<p>Além dos benefícios citados acima, acredito que o <strong><em>Commit Semântico</em></strong> pode demonstrar que o seu perfil de desenvolvedor está alcançando outro nível, e que além de introduzir boas práticas em seu código, você está preocupado em inserir boas práticas em seus commits.</p>\n<p>Essas boas práticas no commit auxiliarão você quando tiver que resolver um problema e/ou quando um colega de trabalho pegará aquele trecho de código feito por você, e conseguirá entender apenas olhando o que foi commitado.</p>\n<p>Espero que tenha gostado da dica de hoje, pois o foco dos artigos é fazer de você um(a) dev cada vez melhor!</p>","timeToRead":5}},"pageContext":{"slug":"posts/entendo-a-importância-dos-commits-semânticos/","previousPost":{"fields":{"slug":"posts/utilizando-o-markdown-para-alanvacar-as-oportunidades-de-trabalho/"},"frontmatter":{"title":"Utilizando o Markdown para alavancar suas oportunidades de trabalho "}},"nextPost":{"fields":{"slug":"posts/lidando-com-responsividade-em-aplicações-móveis-utilizando-o-rem/"},"frontmatter":{"title":"Lidando com responsividade em aplicações móveis utilizando o REM"}}}},
    "staticQueryHashes": ["1544399361","3344698684","3792814546"]}